generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  userId   String   @id @default(uuid()) 
  name     String
  email    String
  createdAt DateTime @default(now())  
  updatedAt DateTime @updatedAt      
}

model Products {
  productId     Int       @id @default(autoincrement()) 
  name          String
  price         Float
  rating        Float?
  stockQuantity Int
  createdAt     DateTime  @default(now()) 
  updatedAt     DateTime  @updatedAt       
  Sales         Sales[]
  Purchases     Purchases[]
}

model Sales {
  saleId      Int       @id @default(autoincrement()) 
  productId   Int
  timestamp   DateTime
  quantity    Int
  unitPrice   Float
  totalAmount Float
  product     Products @relation(fields: [productId], references: [productId])
  createdAt   DateTime @default(now())  
  updatedAt   DateTime @updatedAt       
}

model Purchases {
  purchaseId  Int       @id @default(autoincrement()) 
  productId   Int
  timestamp   DateTime
  quantity    Int
  unitCost    Float
  totalCost   Float
  product     Products @relation(fields: [productId], references: [productId])
  createdAt   DateTime @default(now())  
  updatedAt   DateTime @updatedAt       
}

model Expenses {
  expenseId   Int      @id @default(autoincrement()) 
  category    String
  amount      Float
  timestamp   DateTime
  createdAt   DateTime @default(now())  
  updatedAt   DateTime @updatedAt       
}

model SalesSummary {
  salesSummaryId   Int     @id @default(autoincrement()) 
  totalValue       Float
  changePercentage Float?
  date             DateTime
  createdAt        DateTime @default(now())  
  updatedAt        DateTime @updatedAt      
}

model PurchaseSummary {
  purchaseSummaryId Int     @id @default(autoincrement()) 
  totalPurchased    Float
  changePercentage  Float?
  date              DateTime
  createdAt         DateTime @default(now()) 
  updatedAt         DateTime @updatedAt    
}

model ExpenseSummary {
  expenseSummaryId  Int                 @id @default(autoincrement()) 
  totalExpenses     Float
  date              DateTime
  createdAt         DateTime @default(now())  
  updatedAt         DateTime @updatedAt       
  ExpenseByCategory ExpenseByCategory[]
}

model ExpenseByCategory {
  expenseByCategoryId Int              @id @default(autoincrement()) 
  expenseSummaryId    Int
  category            String
  amount              BigInt
  date                DateTime
  createdAt           DateTime @default(now())  
  updatedAt           DateTime @updatedAt       
  expenseSummary      ExpenseSummary @relation(fields: [expenseSummaryId], references: [expenseSummaryId])
}
